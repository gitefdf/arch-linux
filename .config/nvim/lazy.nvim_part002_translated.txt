:Lazy clear               require("lazy").clear()          清除已完成任务

  :Lazy debug               require("lazy").debug()          显示调试信息

  :Lazy health              require("lazy").health()         运行 :checkhealth lazy

  :Lazy help                require("lazy").help()           切换显示此帮助页面

  :Lazy home                require("lazy").home()           返回插件列表

  :Lazy install [插件]      require("lazy").install(opts?)   安装缺失插件

  :Lazy load {插件}         require("lazy").load(opts)       加载尚未加载的插件
                                                             类似 :packadd
                                                             例如：
                                                             :Lazy load foo.nvim
                                                             使用 :Lazy! load 可跳过
                                                             条件检查

  :Lazy log [插件]          require("lazy").log(opts?)       显示最近更新日志

  :Lazy profile             require("lazy").profile()        显示详细性能分析

  :Lazy reload {插件}       require("lazy").reload(opts)     重新加载插件
                                                             (实验性功能!!)

  :Lazy restore [插件]      require("lazy").restore(opts?)   将所有插件恢复至
                                                             lockfile 记录状态
                                                             单个插件操作：恢复至
                                                             lockfile 状态或光标处
                                                             指定的提交版本

  :Lazy sync [插件]         require("lazy").sync(opts?)      执行安装、清理及
                                                             更新操作

  :Lazy update [插件]       require("lazy").update(opts?)    更新插件（同时会
                                                             更新lockfile文件）
  ----------------------------------------------------------------------------------
所有命令均可添加 **!** 后缀使命令等待执行完成。例如要通过命令行同步lazy插件，可使用：

>shell
    nvim --headless "+Lazy! sync" +qa
<

`opts` 为包含以下键值对的表：

- **wait**: 为true时，调用将等待操作完成
- **show**: 为false时不显示操作界面
- **plugins**: 要执行操作的插件名称列表
- **concurrency**: 限制并发运行任务的`数量`

统计API (`require("lazy").stats()`)：

>lua
    {
      -- 从启动到UIEnter事件的耗时（毫秒）
      startuptime = 0,
      -- 为true时，startuptime表示Neovim进程的精确CPU时间（仅限Linux & macOS）
      -- 比`nvim --startuptime`更精确，因此数值会略高
      -- 为false时，startuptime基于lazy启动时的时间戳差值计算
      real_cputime = false,
      count = 0,      -- 插件总数
      loaded = 0,      -- 已加载插件数
      ---@type table<string, numb
以下是专业翻译：

**lazy.nvim** 提供了一个状态栏组件，可用于显示待处理的更新数量。请确保启用 `config.checker.enabled = true` 以使该功能生效。

配置 lualine.nvim 的示例：

```lua
require("lualine").setup({
  sections = {
    lualine_x = {
      {
        require("lazy.status").updates,
        cond = require("lazy.status").has_updates,
        color = { fg = "#ff9e64" },
      },
    },
  },
})
```

📆 用户事件                       *lazy.nvim-🚀-用法-📆-用户事件*

将触发以下用户事件：

- **LazyDone**：当 lazy 完成启动并加载配置后触发
- **LazySync**：同步操作完成后触发
- **LazyInstall**：安装完成后触发
- **LazyUpdate**：更新完成后触发
- **LazyClean**：清理完成后触发
- **LazyCheck**：检查更新完成后触发
- **LazyLog**：日志操作完成后触发
- **LazyLoad**：加载插件后触发，`data` 属性包含插件名称
- **LazySyncPre**：同步操作开始前触发
- **LazyInstallPre**：安装开始前触发
- **LazyUpdatePre**：更新开始前触发
- **LazyCleanPre**：清理开始前触发
- **LazyCheckPre**：检查更新开始前触发
- **LazyLogPre**：日志操作开始前触发
- **LazyReload**：重新加载插件配置后通过变更检测触发
- **VeryLazy**：在 `LazyDone` 后且处理完 `VimEnter` 自动命令后触发
- **LazyVimStarted**：当 `require("lazy").stats().startuptime` 计算完成后，在 `UIEnter` 事件后触发，适用于仪表盘启动时间更新

❌ 卸载                       *lazy.nvim-🚀-用法-❌-卸载*

要卸载 **lazy.nvim**，需删除以下文件和目录：

- **数据目录**：`~/.local/share/nvim/lazy`
- **状态目录**：`~/.local/state/nvim/lazy`
- **锁文件**：`~/.config/nvim/lazy-lock.json`

若修改过 `XDG` 环境变量，路径可能不同。

🔒 锁文件                             *lazy.nvim-🚀-用法-🔒-锁文件*

每次**更新**后，本地锁文件 (`lazy-lock.json`) 会更新为已安装的版本号。建议将此文件纳入版本控制。

在多台机器上使用 Neovim 配置时，锁文件可确保所有插件版本一致。在其他机器上执行 `:Lazy restore` 即可将插件恢复至锁文件记录的版本。

📦 迁移指南               *lazy.nvim-🚀-用法-📦-迁移指南*

PACKER.NVIM 转换说明：

- `setup` ➡️ `init`
- `requires` ➡️ `dependencies`
- `as` ➡️ `name`
- `opt` ➡️ `lazy`
- `run` ➡️ `build`
- `lock` ➡️ `pin`
- `disable=true` ➡️ `enabled = false`
- `tag='*'` ➡️ `version="*"`
- 多数情况下无需 `after`，必要时改用 `dependencies`
- 多数情况下无需 `wants`，必要时改用 `dependencies`
- `config` 不支持字符串类型，需改用 `fun(LazyPlugin)`
- `module` 会自动加载，无需声明
- `keys` 规范与 |lazy.nvim-different| 不同
- `rtp` 可通过以下方式实现：

```lua
config = function(plugin)
    vim.opt.rtp:append(plugin.dir .. "/custom-rtp")
end
```

在 packer 中，`wants`、`requires` 和 `after` 用于管理依赖关系。而在 lazy 中，大多数 Lua 依赖无需特殊处理——它们可像普通插件一样安装（即使设为 `lazy=true`），当其他插件需要时会自动加载。`dependencies` 键可用于将依赖插件与主插件分组管理。
作为`dependencies`添加的插件将始终采用懒加载模式，并在插件加载时自动加载。

PAQ-NVIM ~

- `as` ➡️ `name`
- `opt` ➡️ `lazy`
- `run` ➡️ `build`

⚡ 性能分析与调试             *lazy.nvim-🚀-用法-⚡-性能分析与调试*

我们精心优化了启动代码（`lazy.core`）以实现最高效率。启动过程中，所有在`VimEnter`或`BufReadPre`事件前调用的Lua文件都会进行字节编译并缓存，这与impatient.nvim<https://github.com/lewis6991/impatient.nvim>的实现类似。

以我的配置为例，加载93个插件仅需约`11毫秒`——当然这得益于大量懒加载策略 :)

**lazy.nvim**内置高级性能分析器`:Lazy profile`，可帮助您优化加载性能。分析视图会清晰展示每个插件的加载原因及耗时情况。

🐛 调试 ~

实时查看活跃的懒加载处理器状态及模块缓存内容。

📂 插件结构化管理*lazy.nvim-🚀-用法-📂-插件结构化管理*

部分用户可能希望将插件配置拆分到多个文件。您可以使用Lua模块替代直接向`setup()`传递配置表。主模块及其顶层子模块的配置将被自动合并，因此无需在主插件文件中手动添加其他文件的`require`语句。

这种方式的优势：

- **新增**插件配置更简单：只需在插件模块中创建新文件
- 支持配置**缓存**：当存在大量小型插件配置时尤为重要
- 配置变更会自动**重载**，确保`:Lazy`界面始终显示最新状态

示例：

- `~/.config/nvim/init.lua`

>lua
    require("lazy").setup("plugins")
<

- `~/.config/nvim/lua/plugins.lua` 或 `~/.config/nvim/lua/plugins/init.lua`（此文件可选）

>lua
    return {
      "folke/neodev.nvim",
      "folke/which-key.nvim",
      { "folke/neoconf.nvim", cmd = "Neoconf" },
    }
<

- `~/.config/nvim/lua/plugins/*.lua`下的所有Lua文件都会自动合并到主配置中

实际案例可参考LazyVim<https://github.com/LazyVim/LazyVim>项目，特别是：
- lazyvim.plugins <https://github.com/LazyVim/LazyVim/tree/main/lua/lazyvim/plugins> 包含所有待加载的插件配置

↩️ 配置导入与合并

在配置表中可通过`import`语句导入其他插件模块。以下两种`setup()`调用方式等效：

>lua
    require("lazy").setup("plugins")
    
    -- 等同于：
    require("lazy").setup({{import = "plugins"}})
<

需导入多个模块时，为每个导入添加独立配置项。例如同时导入LazyVim核心插件和可选插件：

>lua
    require("lazy").setup({
      spec = {
        { "LazyVim/LazyVim", import = "lazyvim.plugins" },
        { import = "lazyvim.plugins.extras.coding.copilot" },
      }
    })
<

导入配置时，只需在本地配置中添加同名插件即可覆盖/合并原有配置。`opts`、`dependencies`、`cmd`、`event`、`ft`和`keys`会与父配置自动合并，其他属性则会直接覆盖父配置。

==============================================================================
8. 🔥 开发者指南                                 *lazy.nvim-🔥-开发者*

为简化用户安装流程，您可以...（后续内容未提供完整翻译）
在你的代码仓库中包含一个`</packages>`规范的包。

最佳实践                      *lazy.nvim-🔥-开发者最佳实践*

- 若插件需`setup()`，创建如下简洁的`lazy.lua`文件：
    ```lua
    return { "me/my-plugin", opts = {} }
    ```
- 纯Lua库插件应通过`lazy = true`实现懒加载：
    ```lua
    { "nvim-lua/plenary.nvim", lazy = true }
    ```
- 优先使用`opts`而非`config`，后者几乎无需显式配置
- 仅当插件需依赖项**同时**安装并加载时使用`dependencies`。Lua插件/库在被`require()`时会自动加载，故无需声明依赖
- 在`build`函数或`*.lua`构建文件中，使用`coroutine.yield(msg:string|LazyMsg)`显示进度
- 构建函数中勿修改`cwd`，因并行构建会相互影响工作目录

构建指南                                  *lazy.nvim-🔥-开发者构建*

规范中的**build**属性支持以下形式：

- `fun(plugin: LazyPlugin)`: 构建函数
- `*.lua`: 构建脚本（如`build.lua`）
- `":Command"`: Neovim命令
- `"rockspec"`: 在插件目录执行`luarocks make`（由`rockspec`包源自动设置）
- 其他**字符串**将作为shell命令执行
- 支持上述类型的`列表`实现多步构建
- 未指定时自动检测`build.lua`

构建函数与`*.lua`脚本在协程中异步执行。通过`coroutine.yield(msg:string|LazyMsg)`展示进度。

yield操作会调度下次`coroutine.resume()`在下个事件循环执行，确保长任务不阻塞Neovim。

```lua
---@class LazyMsg
---@field msg string
---@field level? number vim.log.levels.XXX
```

使用`vim.log.levels.TRACE`可将消息仅显示为任务**状态**信息。

最小化初始化          *lazy.nvim-🔥-开发者最小化初始化*

**lazy.nvim**内置支持创建最小化初始化配置，适用于测试和用户创建`repro.lua`。

在**无头模式**下运行时，所有消息将输出至终端（详见`opts.headless`）。

**minit**会安装/加载所有规范并自动执行更新。

快速启动 ~

```lua
-- 此环境变量将覆盖所有XDG路径
vim.env.LAZY_STDPATH = ".tests"
-- 在stdpath中安装lazy
load(vim.fn.system("curl -s https://raw.githubusercontent.com/folke/lazy.nvim/main/bootstrap.lua"))()
```

BUSTED测试 ~

自动配置`hererocks`并运行<https://olivinelabs.com/busted/>测试框架。

以下是**LazyVim**中使用**minit**运行测试的示例：

```lua
#!/usr/bin/env -S nvim -l

vim.env.LAZY_STDPATH = ".tests"
load(vim.fn.system("curl -s https://raw.githubusercontent.com/folke/lazy.nvim/main/bootstrap.lua"))()

-- 配置lazy.nvim
require("lazy.minit").busted({
  spec = {
    "LazyVim/starter",
    "williamboman/mason-lspconfig.nvim",
    "williamboman/mason.nvim",
    "nvim-treesitter/nvim-treesitter",
  },
})
```

执行方式：

```sh
nvim -l ./tes
以下是翻译后的内容：

测试/busted.lua 测试
<

如需检查测试环境，请运行：

>sh
    nvim -u ./tests/busted.lua
<


REPRO.LUA 重现脚本 ~

>lua
    vim.env.LAZY_STDPATH = ".repro"
    load(vim.fn.system("curl -s https://raw.githubusercontent.com/folke/lazy.nvim/main/bootstrap.lua"))()
    
    require("lazy.minit").repro({
      spec = {
        "stevearc/conform.nvim",
        "nvim-neotest/nvim-nio",
      },
    })
    
    -- 可在此添加其他用于重现问题的操作
<

运行方式：

>sh
    nvim -u repro.lua
<

==============================================================================
9. 相关链接                                                     *lazy.nvim-links*

1. *图片*: https://user-images.githubusercontent.com/292349/208301737-68fb279c-ba70-43ef-a369-8c3e8367d6b1.png
2. *图片*: https://user-images.githubusercontent.com/292349/208301766-5c400561-83c3-4811-9667-1ec4bb3c43b8.png
3. *图片*: https://user-images.githubusercontent.com/292349/208301790-7eedbfa5-d202-4e70-852e-de68aa47233b.png

本文档由 panvimdoc 生成 <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:

（注：保留了原始格式中的标记符号如>sh、>lua等，这些在技术文档中通常表示代码块类型。翻译时对注释和操作说明进行了意译，确保符合中文技术文档的表达习惯。链接和代码部分保持原样未作改动。）