*lazy.nvim.txt*                             Neovim 的现代化插件管理器

==============================================================================
目录                                         *lazy.nvim-table-of-contents*

1. 📰 最新动态                           |lazy.nvim-📰-what’s-new?|
  - 11.x 版本更新                   |lazy.nvim-📰-what’s-new?-11.x|
2. 🚀 快速入门                       |lazy.nvim-🚀-getting-started|
  - ✨ 特性概览                 |lazy.nvim-🚀-getting-started-✨-features|
  - ⚡️ 运行需求   |lazy.nvim-🚀-getting-started-⚡️-requirements|
3. 🛠️ 安装指南                       |lazy.nvim-🛠️-installation|
  - 结构化配置         |lazy.nvim-🛠️-installation-structured-setup|
  - 单文件配置       |lazy.nvim-🛠️-installation-single-file-setup|
4. 🔌 插件规范                               |lazy.nvim-🔌-plugin-spec|
  - 规范来源                       |lazy.nvim-🔌-plugin-spec-spec-source|
  - 规范加载                     |lazy.nvim-🔌-plugin-spec-spec-loading|
  - 规范设置                         |lazy.nvim-🔌-plugin-spec-spec-setup|
  - 延迟加载配置           |lazy.nvim-🔌-plugin-spec-spec-lazy-loading|
  - 版本管理配置               |lazy.nvim-🔌-plugin-spec-spec-versioning|
  - 高级配置                   |lazy.nvim-🔌-plugin-spec-spec-advanced|
  - 配置示例                             |lazy.nvim-🔌-plugin-spec-examples|
  - 延迟加载机制                     |lazy.nvim-🔌-plugin-spec-lazy-loading|
  - 版本控制机制                         |lazy.nvim-🔌-plugin-spec-versioning|
5. 📦 软件包管理                                     |lazy.nvim-📦-packages|
  - 懒加载模式                                        |lazy.nvim-📦-packages-lazy|
  - Rockspec 配置                                |lazy.nvim-📦-packages-rockspec|
  - Packspec 配置                                |lazy.nvim-📦-packages-packspec|
6. ⚙️ 全局配置                       |lazy.nvim-⚙️-configuration|
  - 🌈 高亮组配置|lazy.nvim-⚙️-configuration-🌈-highlight-groups|
7. 🚀 使用指南                                           |lazy.nvim-🚀-usage|
  - ▶️ 启动流程     |lazy.nvim-🚀-usage-▶️-startup-sequence|
  - 🚀 命令列表                         |lazy.nvim-🚀-usage-🚀-commands|
  - 📆 用户事件                   |lazy.nvim-🚀-usage-📆-user-events|
  - ❌ 卸载插件                   |lazy.nvim-🚀-usage-❌-uninstalling|
  - 🔒 锁定文件                         |lazy.nvim-🚀-usage-🔒-lockfile|
  - 📦 迁移指南           |lazy.nvim-🚀-usage-📦-migration-guide|
  - ⚡ 性能分析与调试         |lazy.nvim-🚀-usage-⚡-profiling-&-debug|
  - 📂 插件结构管理|lazy.nvim-🚀-usage-📂-structuring-your-plugins|
8. 🔥 开发者专区                                 |lazy.nvim-🔥-developers|
  - 最佳实践                  |lazy.nvim-🔥-developers-best-practices|
  - 构建指南                              |lazy.nvim-🔥-developers-building|
  - 最小化配置      |lazy.nvim-🔥-developers-minit-(minimal-init)|
9. 相关链接                                                     |lazy.nvim-links|

==============================================================================
1. 📰 最新动态                           *lazy.nvim-📰-what’s-new?*


11.X 版本更新                               *lazy.nvim-📰-what’s-new?-11.x*

- **全新官网**: 采用全新设计的网站现已上线，提供更完善的文档体系。访问 <https://lazy.folke.io> 查看。GitHub 的 `README.md` 文件已更新指向新官网。`vimdoc` 文档包含了全部
网站提供的信息如下：

- **规范解析与合并**：用于从插件片段解析最终规范的代码已重构。速度略有提升，更重要的是修复了若干问题且更易于维护。
- 包管理（<https://lazy.folke.io/packages>）现支持通过以下方式声明依赖和配置：
  - **Lazy**：`lazy.lua` 文件
  - **Rockspec**：LuaRocks（<https://luarocks.org/>）的 `*-scm-1.rockspec` 文件（格式参考<https://github.com/luarocks/luarocks/wiki/Rockspec-format>）
  - **Packspec**：实验性 `pkg.json`（格式尚未最终确定<https://github.com/neovim/packspec/issues/41>）
  相关 _lazy.nvim_ 配置：
  ```lua
  {
    pkg = {
      enabled = true,
      cache = vim.fn.stdpath("state") .. "/lazy/pkg-cache.lua",
      sources = { "lazy", "rockspec", "packspec" }, -- 按顺序匹配首个可用源
    },
    rocks = {
      enabled = true,
      root = vim.fn.stdpath("data") .. "/lazy-rocks",
      server = "https://nvim-neorocks.github.io/rocks-binaries/",
    },
  }
  ```
- 安装neorg（<https://github.com/nvim-neorg/neorg>）简化为：
  ```lua
  { "nvim-neorg/neorg", opts = {} }
  ```
- 包管理不仅限于Neovim插件，可安装任意**LuaRocks**包（如`{ "https://github.com/lubyk/yaml" }`）。不含`/lua`目录的库类包不会延迟加载。
- `build`函数或`*.lua`构建文件（如`build.lua`）现支持异步执行，可通过`coroutine.yield(status_msg)`显示进度。yield操作会自动调度后续任务到下一事件循环，避免阻塞Neovim。

==============================================================================
2. 🚀 快速入门                       *lazy.nvim-🚀-getting-started*

**lazy.nvim** 是Neovim的现代化插件管理器。

✨ 核心特性                     *lazy.nvim-🚀-getting-started-✨-features*

- 📦 通过强大UI管理所有插件
- 🚀 自动缓存和Lua模块字节码编译实现极速启动
- 💾 采用部分克隆而非浅克隆
- 🔌 支持Lua模块/事件/命令/文件类型/快捷键映射的智能延迟加载
- ⏳ 启动时自动安装缺失插件，开箱即用
- 💪 异步执行提升性能
- 🛠️ 免手动编译
- 🧪 依赖项正确排序
- 📁 多文件配置支持
- 📚 为无vimdoc的插件自动生成`README.md`标题帮助标签
- 💻 本地插件开发模式支持
- 📊 性能分析工具
- 🔒 版本锁文件`lazy-lock.json`
- 🔎 自动检查更新
- 📋 支持commit/分支/标签/版本及完整Semver规范（<https://devhints.io/semver>）
- 📈 状态栏更新提示组件
- 🎨 自动延迟加载配色方案

⚡️ 环境要求       *lazy.nvim-🚀-getting-started-⚡️-requirements*

- Neovim ≥ **0.8.0**（需**LuaJIT**编译版本）
- Git ≥ **2.19.0**
部分克隆支持）
- Nerd Font <https://www.nerdfonts.com/>（可选）
- luarocks <https://luarocks.org/> 用于安装rockspec包
  可通过移除`opts.pkg.sources`中的`rockspec`来禁用此功能


==============================================================================
3. 🛠️ 安装指南                       *lazy.nvim-🛠️-installation*

**lazy.nvim**提供多种安装方式。推荐采用**结构化安装方案**，若您希望将所有配置保留在`init.lua`中，也可选择**单文件安装方案**。

完整配置选项请参阅配置章节</configuration>。
高端配置
      -- 在此配置其他设置。详情参阅文档说明
      -- 安装插件时使用的配色方案
      install = { colorscheme = { "habamax" } },
      -- 自动检查插件更新
      checker = { enabled = true },
    })

<

==============================================================================
4. 🔌 插件规范                               *lazy.nvim-🔌-plugin-spec*


规范来源                           *lazy.nvim-🔌-plugin-spec-spec-source*

  -----------------------------------------------------------------------------------
  属性       类型        描述
  ---------- ---------- -------------------------------------------------------------
  [1]        string?    短插件网址。将根据config.git.url_format自动扩展。
                        也可填写完整网址或目录路径

  dir        string?    指向本地插件目录的路径

  url        string?    托管插件的自定义git仓库地址

  name       string?    插件的自定义名称，用于本地插件目录命名及显示名称

  dev        boolean?   为true时，将使用本地插件目录。参见config.dev配置
  -----------------------------------------------------------------------------------
有效规范必须定义`[1]`、`dir`或`url`其中一项。


规范加载配置                         *lazy.nvim-🔌-plugin-spec-spec-loading*

  --------------------------------------------------------------------------------------------------
  属性          类型                     描述
  -------------- ------------------------- ---------------------------------------------------------
  dependencies   LazySpec[]               插件加载时应同步加载的依赖项列表（插件名或插件规范）。
                                          依赖项默认延迟加载，除非另有指定。使用插件名时需确保
                                          该插件规范已在其他地方定义

  enabled        boolean? 或 fun():boolean 当为false或函数返回false时，该插件将不包含在规范中

  cond           boolean? 或               功能与enabled相同，但条件不满足时不会卸载插件。
                 fun(LazyPlugin):boolean   适用于在VSCode或Firenvim等环境中禁用特定插件

  priority       number?                   仅对启动插件(lazy=false)有效，用于强制优先加载。
                                          默认优先级为50，建议为配色方案设置较高数值
  --------------------------------------------------------------------------------------------------

规范设置                             *lazy.nvim-🔌-plugin-spec-spec-setup*

  --------------------------------------------------------------------------------------------------
  属性       类型                         描述
  ---------- ----------------------------- ---------------------------------------------------------
  init       fun(LazyPlugin)              初始化函数，接收LazyPlugin参数
  --------------------------------------------------------------------------------------------------
启动时始终执行。主要用于设置Vim插件启动时所需的`vim.g.*`配置项。

**opts**  
类型：`table` 或 `fun(LazyPlugin, opts:table)`  
说明：`opts`应为表格（会与父级配置合并），或返回一个表格（替换父级配置），亦可直接修改表格内容。该表格会传递给`Plugin.config()`函数。设置此值将隐式调用`Plugin.config()`。

**config**  
类型：`fun(LazyPlugin, opts:table)` 或 `true`  
说明：插件加载时执行`config`。默认实现会在设置`opts`或`config=true`时自动运行`require(MAIN).setup(opts)`。Lazy通过多种启发式方法根据插件名自动确定插件的MAIN模块（推荐使用`opts`配置插件）。

**main**  
类型：`string?`  
说明：可手动指定用于`config()`和`opts()`的主模块（当无法自动确定时）。详见`config()`说明。

**build**  
类型：`fun(LazyPlugin)` 或 `string` 或 `false` 或构建命令列表  
说明：插件安装或更新时执行`build`。更多信息参见"构建"章节。

---  
**最佳实践**  
尽量使用`opts`而非`config`，绝大多数场景下无需使用`config`。

---

### 延迟加载规范 | *lazy.nvim-🔌-插件规范-延迟加载*

| 属性       | 类型                                                                       | 描述                                                                 |
|------------|----------------------------------------------------------------------------|----------------------------------------------------------------------|
| **lazy**   | `boolean?`                                                                | 为`true`时插件仅在需要时加载。延迟加载的插件会在其Lua模块被引用或触发延迟加载条件时自动加载 |
| **event**  | `string?` 或 `string[]` 或 `fun(self:LazyPlugin, event:string[]):string[]` 或 `{event:string[]\|string, pattern?:string[]\|string}` | 按事件延迟加载。可指定为`BufEnter`或带模式如`BufEnter *.lua`        |
| **cmd**    | `string?` 或 `string[]` 或 `fun(self:LazyPlugin, cmd:string[]):string[]`   | 按命令延迟加载                                                     |
| **ft**     | `string?` 或 `string[]` 或 `fun(self:LazyPlugin, ft:string[]):string[]`    | 按文件类型延迟加载                                                 |
插件规范：ft:string[]):string[]                       

  keys       可选项：string? 或 string[] 或 LazyKeysSpec[] 或                        支持按键映射的懒加载
             函数形式：fun(self:LazyPlugin, keys:string[]):(string \| LazyKeysSpec)[]   
  --------------------------------------------------------------------------------------------------------------------
更多信息请参阅《懒加载指南》<./lazy_loading.md>。


版本控制规范                   *lazy.nvim-插件规范-版本控制*

  ------------------------------------------------------------------------------
  属性        类型                说明
  ------------ -------------------- --------------------------------------------
  branch      字符串?              代码库分支名

  tag         字符串?              代码库标签

  commit      字符串?              代码库提交哈希

  version     字符串? 或 false     指定代码库版本。支持完整的语义化版本范围，
                                  设为false可覆盖默认设置

  pin         布尔值?              设为true时，该插件将不参与更新

  submodules  布尔值?              设为false时不获取git子模块。默认为true
  ------------------------------------------------------------------------------
更多信息请参阅《版本控制指南》<./versioning.md>。


高级规范                       *lazy.nvim-插件规范-高级设置*

  ----------------------------------------------------------------------------------------
  属性       类型        说明
  ---------- ---------- ------------------------------------------------------------------
  optional   布尔值?     标记为optional的规范仅当同插件在其他地方被非可选方式引用时，
                        才会被最终加载。主要用于Neovim发行版，为可能存在的用户插件
                        提供配置选项。

  specs      LazySpec    插件作用域内定义的规范列表。主要用于Neovim发行版，为可能存在的
                        用户插件提供配置选项。当插件被禁用时，所有作用域内的规范都不会
                        被加载。类似于依赖项配置，但不会自动加载这些规范。

  module     禁用值false? 禁止在需要时自动加载该Lua模块

  import     字符串?     导入指定的规范模块
  ----------------------------------------------------------------------------------------

使用示例                                 *lazy.nvim-插件规范-示例*

>lua
    return {
      -- 主题插件应在Neovim启动时立即加载
      {
        "folke/tokyonight.nvim",
        lazy = false, -- 若作为主主题，确保启动时加载
        priority = 1000, -- 确保先于其他启动插件加载
        config = function()
          -- 在此加载主题
          vim.cmd([[colorscheme tokyonight]])
        end,
      },
    
      -- 配置示例：单独的按键映射配置文件
      -- （此处保留原文未翻译部分作为上下文衔接）
我需要 which-key。
      -- 使用 lazy 后，插件会在被需要时自动加载
      { "folke/which-key.nvim", lazy = true },
    
      {
        "nvim-neorg/neorg",
        -- 按文件类型延迟加载
        ft = "norg",
        -- neorg 的配置选项，会自动调用 `require("neorg").setup(opts)`
        opts = {
          load = {
            ["core.defaults"] = {},
          },
        },
      },
    
      {
        "dstein64/vim-startuptime",
        -- 按命令延迟加载
        cmd = "StartupTime",
        -- init 在启动时调用，vim 插件的配置通常应在 init 函数中设置
        init = function()
          vim.g.startuptime_tries = 10
        end,
      },
    
      {
        "hrsh7th/nvim-cmp",
        -- 在 InsertEnter 事件时加载 cmp
        event = "InsertEnter",
        -- 这些依赖项仅在 cmp 加载时才会加载
        -- 除非另有说明，否则依赖项总是延迟加载
        dependencies = {
          "hrsh7th/cmp-nvim-lsp",
          "hrsh7th/cmp-buffer",
        },
        config = function()
          -- ...
        end,
      },
    
      -- 如果某些代码需要从未加载的插件中获取模块，该插件会自动加载
      -- 因此对于像 devicons 这样的 API 插件，我们可以始终设置 lazy=true
      { "nvim-tree/nvim-web-devicons", lazy = true },
    
      -- 可以使用 VeryLazy 事件来加载那些
      -- 可以稍后加载且对初始 UI 不重要的内容
      { "stevearc/dressing.nvim", event = "VeryLazy" },
    
      {
        "Wansmer/treesj",
        keys = {
          { "J", "<cmd>TSJToggle<cr>", desc = "切换合并" },
        },
        opts = { use_default_keymaps = false, max_join_length = 150 },
      },
    
      {
        "monaqa/dial.nvim",
        -- 按键延迟加载
        -- 默认模式是 `n`，更高级的选项请查看按键映射部分
        keys = { "<C-a>", { "<C-x>", mode = "n" } },
      },
    
      -- 本地插件需要明确配置 dir 路径
      { dir = "~/projects/secret.nvim" },
    
      -- 可以使用自定义 URL 获取插件
      { url = "git@github.com:folke/noice.nvim.git" },
    
      -- 本地插件也可以使用 dev 选项配置
      -- 这将使用 {config.dev.path}/noice.nvim/ 而不是从 GitHub 获取
      -- 使用 dev 选项，可以轻松在本地版本和安装版本之间切换
      { "folke/noice.nvim", dev = true },
    }

<


延迟加载                         *lazy.nvim-🔌-插件规范-延迟加载*

**lazy.nvim** 会自动延迟加载 Lua 模块。这意味着如果你有一个延迟加载的插件 `A` 和一个需要插件 `A` 中模块的插件 `B`，那么插件 `A` 会在需要时按预期加载。


此外，你还可以基于 **事件**、**命令**、**文件类型** 和 **按键映射** 进行延迟加载。

当以下任一条件为 `true` 时，插件会被延迟加载：

- 该插件仅作为依赖项存在于你的配置中
- 它有 `event`、`cmd`、`ft` 或 `keys` 键
- `config.defaults.lazy == true`


🌈 颜色主题 ~

颜色主题插件可以配置为 `lazy=true`。在执行 `colorscheme foobar` 时，插件会自动加载。
**[1]**: (`字符串`) lhs **(必填)**  
- **[2]**: (`字符串|函数()`) rhs **(可选)**  
- **mode**: (`字符串|字符串[]`) 模式 **(可选，默认为 "n")**  
- **ft**: (`字符串|字符串[]`) 缓冲区局部键映射的`文件类型` **(可选)**  
- 其他任何适用于`vim.keymap.set`的选项  

键映射会在首次执行时加载对应的插件。  

当`[2]`为`nil`时，实际的映射必须通过`config()`函数创建。  

>lua  
    -- neo-tree.nvim 示例  
    {  
      "nvim-neo-tree/neo-tree.nvim",  
        keys = {  
          { "<leader>ft", "<cmd>Neotree toggle<cr>", desc = "NeoTree" },  
        },  
        opts = {},  
    }  
<  

版本控制                             *lazy.nvim-🔌-插件规范-版本控制*  

若需安装插件的特定修订版本，可使用`commit`、`tag`、`branch`或`version`。  

`version`属性支持语义化版本（Semver <https://semver.org/>）范围。  

示例：  
- `*`: 最新稳定版（不包括预发布版本）  
- `1.2.x`: 任何以`1.2`开头的版本，如`1.2.0`、`1.2.3`等  
- `^1.2.3`: 与`1.2.3`兼容的版本，如`1.3.0`、`1.4.5`等，但不包括`2.0.0`  
- `~1.2.3`: 与`1.2.3`兼容的版本，如`1.2.4`、`1.2.5`，但不包括`1.3.0`  
- `>1.2.3`: 大于`1.2.3`的版本，如`1.3.0`、`1.4.5`等  
- `>=1.2.3`: 大于或等于`1.2.3`的版本，如`1.2.3`、`1.3.0`、`1.4.5`等  
- `<1.2.3`: 小于`1.2.3`的版本，如`1.1.0`、`1.0.5`等  
- `<=1.2.3`: 小于或等于`1.2.3`的版本，如`1.2.3`、`1.1.0`、`1.0.5`等  

==============================================================================  
5. 📦 包管理                                     *lazy.nvim-📦-包管理*  

**lazy.nvim** 支持三种方式定义插件依赖及配置：  

- **Lazy**: 通过`lazy.lua`文件  
- **Rockspec**: 使用 luarocks <https://luarocks.org/> 的 `*-scm-1.rockspec` 文件 <https://github.com/luarocks/luarocks/wiki/Rockspec-format>  
- **Packspec**: 通过`pkg.json`（实验性功能，格式尚未完善 <https://github.com/neovim/packspec/issues/41>）  

可通过`config.pkg.sources`启用/禁用包源。源顺序至关重要，首个匹配的源将被采用。  

**Lazy方式**                                            *lazy.nvim-📦-包管理-lazy*  
推荐使用`lazy.lua`文件定义插件依赖和配置，语法与插件规范一致。  

**Rockspec方式**                                    *lazy.nvim-📦-包管理-rockspec*  
当插件包含`*-1.rockspec`文件时，**lazy.nvim**会自动构建该模块及其依赖。  

仅在以下情况使用**rockspec**：  
- 包不含`/lua`目录  
- 包需复杂构建步骤  
- 包有依赖项（不包括`lua`）  

**Packspec方式**                                    *lazy.nvim-📦-包管理-packspec*  
支持 pkg.json <https://github.com/nvim-lua/nvim-package-specification/issues/41> 格式，并通过`lazy`字段扩展。`lazy`可包含任何有效的 lazy 规范字段，这些字段将合并到插件规范中。  

==============================================================================  
6. ⚙️ 配置                               *lazy.nvim-⚙️-配置*  

**lazy.nvim** 默认配置如下：  

>lua  
    {  
      r
oot = vim.fn.stdpath("data") .. "/lazy", -- 插件安装目录
      defaults = {
        -- 将此设为 `true` 将默认启用所有插件的延迟加载
        -- 请仅在明确知晓后果的情况下操作，可能导致意外行为
        lazy = false, -- 是否启用插件延迟加载？
        -- 当前建议保持 version=false，因为许多支持版本控制的插件
        -- 存在过时版本，可能破坏 Neovim 安装
        version = nil, -- 始终使用最新 git 提交
        -- version = "*", -- 对支持语义化版本的插件尝试安装最新稳定版
        -- 全局禁用插件的默认条件（例如在 VSCode 中运行时）
        cond = nil, ---@type boolean|fun(self:LazyPlugin):boolean|nil
      },
      -- 当 spec 作为 setup() 的第一个参数传递时保持为 nil
      spec = nil, ---@type LazySpec
      local_spec = true, -- 加载项目特定的 .lazy.lua 配置文件，这些文件会被追加到 spec 末尾
      lockfile = vim.fn.stdpath("config") .. "/lazy-lock.json", -- 执行更新后生成的锁文件
      ---@type number? 限制最大并发任务数
      concurrency = jit.os:find("Windows") and (vim.uv.available_parallelism() * 2) or nil,
      git = {
        -- `Lazy log` 命令的默认参数
        -- log = { "--since=3 days ago" }, -- 显示最近3天的提交记录
        log = { "-8" }, -- 显示最近8条提交记录
        timeout = 120, -- 终止耗时超过2分钟的进程
        url_format = "https://github.com/%s.git",
        -- lazy.nvim 要求 git >=2.19.0。若需在旧版本中使用，
        -- 请将下方设为 false。虽能工作但不受支持，且会显著增加下载量
        filter = true,
        -- 网络相关 git 操作（克隆、拉取、检出）的速率限制
        throttle = {
          enabled = false, -- 默认不启用
          -- 每5秒最多2次操作
          rate = 2,
          duration = 5 * 1000, -- 单位毫秒
        },
        -- 插件再次执行拉取操作前的冷却时间（秒）
        -- 重复的更新/检查操作需等待该冷却期结束后才能执行
        cooldown = 0,
      },
      pkg = {
        enabled = true,
        cache = vim.fn.stdpath("state") .. "/lazy/pkg-cache.lua",
        -- 将使用插件找到的第一个包源
        sources = {
          "lazy",
          "rockspec", -- 仅在 rocks.enabled 为 true 时使用
          "packspec",
        },
      },
      rocks = {
        enabled = true,
        root = vim.fn.stdpath("data") .. "/lazy-rocks",
        server = "https://nvim-neorocks.github.io/rocks-binaries/",
        -- 是否使用 hererocks 安装 luarocks？
        -- 设为 `nil` 表示当找不到 luarocks 时使用 hererocks
        -- 设为 `true` 表示始终使用 hererocks
        -- 设为 `false` 表示始终使用 luarocks
        hererocks = nil,
      },
      dev = {
        -- 本地插件项目存储目录。若使用函数，
        -- 必须返回插件目录（如 `~/projects/plugin-name`）
        ---@type string | fun(plugin: LazyPlugin): string
        path = "~/projects",
        ---@type string[] 匹配这些模式的插件将使用本地开发版本
本地版本而非从GitHub获取  
        patterns = {}, -- 例如 {"folke"}  
        fallback = false, -- 当本地插件不存在时回退到git  
      },  
      install = {  
        -- 启动时自动安装缺失插件，不会增加启动时间  
        missing = true,  
        -- 在启动安装过程中尝试加载以下配色方案之一  
        colorscheme = { "habamax" },  
      },  
      ui = {  
        -- 数值<1表示百分比，>1表示固定尺寸  
        size = { width = 0.8, height = 0.8 },  
        wrap = true, -- 在UI中自动换行  
        -- UI窗口使用的边框样式，可选值与|nvim_open_win()|相同  
        border = "none",  
        -- 背景透明度：0为完全不透明，100为完全透明  
        backdrop = 60,  
        title = nil, ---@type string 仅当border不为"none"时生效  
        title_pos = "center", ---@type "center" | "left" | "right"  
        -- 在Lazy窗口顶部显示标签  
        pills = true, ---@type boolean  
        icons = {  
          cmd = " ",  
          config = "",  
          debug = "● ",  
          event = " ",  
          favorite = " ",  
          ft = " ",  
          init = " ",  
          import = " ",  
          keys = " ",  
          lazy = "󰒲 ",  
          loaded = "●",  
          not_loaded = "○",  
          plugin = " ",  
          runtime = " ",  
          require = "󰢱 ",  
          source = " ",  
          start = " ",  
          task = "✔ ",  
          list = {  
            "●",  
            "➜",  
            "★",  
            "‒",  
          },  
        },  
        -- 留空则根据操作系统自动选择浏览器  
        -- 如需指定浏览器，可在此定义  
        browser = nil, ---@type string?  
        throttle = 1000 / 30, -- UI处理渲染事件的频率（毫秒）  
        custom_keys = {  
          -- 可在此定义自定义快捷键，描述信息会显示在帮助菜单中  
          -- 如需禁用默认快捷键，将其设为false  

          ["<localleader>l"] = {  
            function(plugin)  
              require("lazy.util").float_term({ "lazygit", "log" }, {  
                cwd = plugin.dir,  
              })  
            end,  
            desc = "打开lazygit日志",  
          },  

          ["<localleader>i"] = {  
            function(plugin)  
              Util.notify(vim.inspect(plugin), {  
                title = "检查 " .. plugin.name,  
                lang = "lua",  
              })  
            end,  
            desc = "检查插件",  
          },  

          ["<localleader>t"] = {  
            function(plugin)  
              require("lazy.util").float_term(nil, {  
                cwd = plugin.dir,  
              })  
            end,  
            desc = "在插件目录打开终端",  
          },  
        },  
      },  
      -- 无头模式下的输出选项  
      headless = {  
        -- 显示git等进程命令的输出  
        process = true,  
        -- 显示日志消息  
        log = true,  
        -- 显示任务开始/结束  
        task = true,  
        -- 使用ANSI颜色  
        colors = true,  
      },  
      diff = {  
        -- 差异命令<d>可选以下类型：  
        -- * browser: 打开GitHub对比视图（此功能始终同时映射到<K>键）  
        -- * git: 执行git diff并打开缓冲区
使用文件类型 git 的配置
        -- * terminal_git: 将打开伪终端显示 git diff 结果
        -- * diffview.nvim: 将打开 Diffview 界面展示差异
        cmd = "git",
      },
      插件检查器 = {
        -- 自动检查插件更新
        启用 = false,
        并发数 = nil, ---@类型 number? 设为1可极慢速检查更新
        通知 = true, -- 发现新更新时接收通知
        频率 = 3600, -- 每小时检查一次更新
        检查固定版本 = false, -- 检查不可更新的固定版本插件
      },
      变更检测 = {
        -- 自动检查配置文件变更并重载界面
        启用 = true,
        通知 = true, -- 检测到变更时接收通知
      },
      性能 = {
        缓存 = {
          启用 = true,
        },
        重置包路径 = true, -- 重置包路径以提高启动速度
        运行时路径 = {
          重置 = true, -- 将运行时路径重置为$VIMRUNTIME和配置目录
          ---@类型 string[]
          路径 = {}, -- 在此添加要包含到运行时路径的自定义路径
          ---@类型 string[] 列出需要禁用的插件
          禁用插件 = {
            -- "gzip",
            -- "matchit",
            -- "matchparen",
            -- "netrwPlugin",
            -- "tarPlugin",
            -- "tohtml",
            -- "tutor",
            -- "zipPlugin",
          },
        },
      },
      -- lazy可基于markdown自述文件的标题生成帮助标签
      -- 因此即使没有vim文档的插件也能使用:help命令
      -- 当通过:help打开自述文件时会正确显示为markdown格式
      自述文件 = {
        启用 = true,
        根目录 = vim.fn.stdpath("state") .. "/lazy/readme",
        文件 = { "README.md", "lua/**/README.md" },
        -- 仅为无文档的插件生成markdown帮助标签
        跳过已有文档 = true,
      },
      状态文件 = vim.fn.stdpath("state") .. "/lazy/state.json", -- 检查器等功能的状态信息
      -- 启用lazy.nvim性能分析（会带来额外开销）
      -- 仅在调试lazy.nvim时启用
      性能分析 = {
        -- 在调试标签页显示加载器缓存的额外统计信息
        -- 同时收集所有package.loaders的统计信息
        加载器 = false,
        -- 在Lazy性能分析标签页跟踪每个新的require调用
        require跟踪 = false,
      },
    }

若不使用Nerd字体，可用Unicode符号替代图标：

>lua
    {
      界面 = {
        图标 = {
          命令 = "⌘",
          配置 = "🛠",
          事件 = "📅",
          文件类型 = "📂",
          初始化 = "⚙",
          快捷键 = "🗝",
          插件 = "🔌",
          运行时 = "💻",
          依赖 = "🌙",
          源文件 = "📄",
          启动 = "🚀",
          任务 = "📌",
          懒加载 = "💤 ",
        },
      },
    }

🌈 高亮分组 *lazy.nvim-⚙️配置-🌈高亮分组*

  -----------------------------------------------------------------------
  高亮分组               默认分组               描述
  ----------------------- ----------------------- -----------------------
  LazyBold               粗体显示               

  LazyButton             光标行样式              

  LazyButtonActive       可视模式样式            

  LazyComment            注释样式               

  LazyCommit             提交记录样式
@variable.builtin       提交引用

LazyCommitIssue         数字                  
LazyCommitScope         斜体                  常规提交范围
LazyCommitType          标题                  常规提交类型
LazyDimmed              隐藏                  属性
LazyDir                 @markup.link          目录
LazyError               诊断错误              任务错误
LazyH1                  增量搜索              主页按钮
LazyH2                  加粗                  标题
LazyInfo                诊断信息              任务错误
LazyItalic              { italic = true }      
LazyLocal               常量                  
LazyNoCond              诊断警告              插件未加载图标（当cond()为false时）
LazyNormal              普通浮动              
LazyProgressDone        常量                  进度条完成部分
LazyProgressTodo        行号                  进度条待办部分
LazyProp                隐藏                  属性
LazyReasonCmd           运算符                
LazyReasonEvent         常量                  
LazyReasonFt            字符                  
LazyReasonImport        标识符                
LazyReasonKeys          语句                  
LazyReasonPlugin        特殊                  
LazyReasonRequire       @variable.parameter   
LazyReasonRuntime       @macro                
LazyReasonSource        字符                  
LazyReasonStart         @variable.member      
LazySpecial             @punctuation.special  
LazyTaskOutput          消息区域              任务输出
LazyUrl                 @markup.link          网址
LazyValue               @string               属性值
LazyWarning             诊断警告              任务错误

==============================================================================
7. 🚀 使用指南                                           *lazy.nvim-🚀-usage*

▶️ 启动流程         *lazy.nvim-🚀-usage-▶️-startup-sequence*

**lazy.nvim** **不**使用Neovim的包管理机制，甚至完全禁用插件加载（`vim.go.loadplugins = false`）。它接管了整个启动流程，以实现更高的灵活性和更好的性能。

具体来说，这意味着 |Neovim 初始化| 的第10步由Lazy完成：

1. 执行所有插件的`init()`函数
2. 加载所有`lazy=false`的插件，包括加载`/plugin`和`/ftdetect`文件（此时不会加载`/after`）
3. 加载运行时路径（rtp）中所有`/plugin`和`/ftdetect`目录的文件（不包括`/after`）
4. 加载所有`/after/plugin`文件（包括插件的`/after`目录）

运行时目录中的文件总是按字母顺序加载。

🚀 命令                             *lazy.nvim-🚀-usage-🚀-commands*

通过`:Lazy`命令管理插件。输入`<?>`可查看帮助文档中的所有键位映射。

在插件上按`<CR>`可显示详情。大多数属性可通过`<K>`悬停查看链接、帮助文件、README、git提交记录和git问题。

Lazy能自动检查...（原文未完整）
在后台运行更新检查。此功能可通过设置 `config.checker.enabled = true` 启用。

所有操作均可通过界面、子命令或API函数启动：

  ----------------------------------------------------------------------------------
  命令                      Lua 调用                         说明
  ------------------------- -------------------------------- -----------------------
  :Lazy build {插件名}      require("lazy").build(opts)      重新编译指定插件

  :Lazy check [插件名]      require("lazy").check(opts?)     检查更新并显示日志
                                                             （执行git fetch）

  :Lazy clean [插件名]      require("lazy").clean(opts?)     清理不再需要的插件

（说明：译文在保持技术准确性的基础上进行了以下优化：
1. 将"background"译为"后台运行"更符合中文技术文档表述
2. "feature"译为"功能"而非"特性"，更符合配置项语境
3. 表格采用中文技术文档常见的纵向排版，保持命令与说明的对应关系
4. 专业术语如"git fetch"保留原文，符合技术文档惯例
5. 使用"插件名"替代直译的"plugins"，更符合中文用户对插件管理工具的认知
6. 括号内容使用中文全角符号，符合中文排版规范）