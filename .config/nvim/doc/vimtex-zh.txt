*zh-vimtex*

# introduction

vimtex 提供了用于编辑 `LaTeX` 文档的便捷功能。vimtex 的主要目标是简洁、实用，并且易于定制和扩展。  
可以理解的是，文档过于冗长，不适合通读全文。建议新用户阅读或浏览完整的介绍部分，
因为它应能清楚地说明 vimtex 是什么，以及它不是什么。文档的其余部分应被视为该插件各个组成部分的参考资料
\subsection{comment on internal tex plugin}
vim 自带相当不错的 \LaTeX 支持.具体来说，它提供语法高亮、自动缩进，以及一些合理的选项。
当 vimtex 启用时，它会覆盖内置的 tex 插件，对 tex 文件类型的语法高亮和特定功能进行接管。
为了避免出现某些 .tex 文件（例如空文档）默认被识别为 plaintex 文件类型（ft-plaintex-syntax）的意外行为，
vimtex 会覆盖 .tex 文件的文件类型检测机制。
the user may prevent this overriding by specifying the g:tex_flavor option something different than 'latex'.

\subsection{功能概览}
使用 latexmk、latexrun、tectonic 或 arara 对文档进行编译
- latex log parsing for quickfix entries using
  - internal method
  - `pplatex`

编译文档的选定部分


\subsection{编译后端}



\subsection{requirements}
\subsection{support for multi-file projects}
\subsection{support for tex specifiers}
\subsection{宏包检测}
\subsection{integration with other plugins}
\section{usage}
\subsection{default mappings}
vimtex 被设计为通过一组映射进行控制。注意，大多数映射也可以作为命令使用，参见 vimtex-commands。

许多映射使用\texttt{<localleader>l}作为通用前缀，其中默认的 <localleader> 是 \q。
因此，对于大多数人来说，\texttt{<localleader>ll} 就意味着 \q ll这个前缀可以通过 \texttt{g:vimtex_mappings_prefix} 进行更改。

rhs 是通过 <plug>-mappings 提供的，参见 using-<plug>。
对于任何给定的 <plug> 映射，只有当该映射尚不存在时，才会创建默认映射。
这意味着如果用户定义了一个自定义映射，例如 \\\texttt{nmap <space>li <plug>(vimtex-info)} 那么相应的 lhs 将不会被映射。
如果你愿意，可以通过 \\\texttt{g:vimtex_mappings_enable} 禁用所有默认映射。

所有需要的功能都必须通过列出的 rhs <plug>-maps 或 映射的可用命令来定义自定义映射。
在下方映射列表中，lhs 是默认 mappings，rhs 是相应的 <plug>-maps，mode 表示这些 mappings 在哪种 vim 模式下有效。参见 map-modes 了解各种模式的说明。

指示符指代相应映射命令的前缀，例如 n 指的是 nmap，nx 指的是 nmap 和 xmap，等等。
除了下方列出的映射之外，vimtex 还提供了方便的插入模式映射（insert mode mappings），以便更容易、更快速地输入数学公式。
该功能将在后文中更详细地说明，参见 vimtex-imaps。

{\ttfamily
\begin{xltabular}{\textwidth}[t]{|l|l|X|}
	\hline
	lhs&rhs&mode\\\hline
	<localleader>li&<plug>(vimtex-info)&n\\\hline
	<localleader>lI&<plug>(vimtex-info-full)&n\\\hline
	<localleader>lt&<plug>(vimtex-toc-open)&n\\\hline
	<localleader>lT&<plug>(vimtex-toc-toggle)&n\\\hline
	<localleader>lq&<plug>(vimtex-log)&n\\\hline
	<localleader>lv&<plug>(vimtex-view)&n\\\hline
	<localleader>lr&<plug>(vimtex-reverse-search)&n\\\hline
	<localleader>ll&<plug>(vimtex-compile)&n\\\hline
	<localleader>lL&<plug>(vimtex-compile-selected)&nx\\\hline
	<localleader>lk&<plug>(vimtex-stop)&n\\\hline
	<localleader>lK&<plug>(vimtex-stop-all)&n\\\hline
	<localleader>le&<plug>(vimtex-errors)&n\\\hline
	<localleader>lo&<plug>(vimtex-compile-output)&n\\\hline
	<localleader>lg&<plug>(vimtex-status)&n\\\hline
	<localleader>lG&<plug>(vimtex-status-all)&n\\\hline
	<localleader>lc&<plug>(vimtex-clean)&n\\\hline
	<localleader>lC&<plug>(vimtex-clean-full)&n\\\hline
	<localleader>lm&<plug>(vimtex-imaps-list)&n\\\hline
	<localleader>lx&<plug>(vimtex-reload)&n\\\hline
	<localleader>lX&<plug>(vimtex-reload-state)&n\\\hline
	<localleader>ls&<plug>(vimtex-toggle-main)&n\\\hline
	<localleader>la&<plug>(vimtex-context-menu)&n\\\hline
	dse&<plug>(vimtex-env-delete)&n\\\hline
	dsc&<plug>(vimtex-cmd-delete)&n\\\hline
	ds$&<plug>(vimtex-env-delete-math)&n\\\hline
	dsd&<plug>(vimtex-delim-delete)&n\\\hline
	cse&<plug>(vimtex-env-change)&n\\\hline
	csc&<plug>(vimtex-cmd-change)&n\\\hline
	cs$&<plug>(vimtex-env-change-math)&n\\\hline
	csd&<plug>(vimtex-delim-change-math)&n\\\hline
	tsf&<plug>(vimtex-cmd-toggle-frac)&x\\\hline
	tsc&<plug>(vimtex-cmd-toggle-star)&n\\\hline
	tss&<plug>(vimtex-env-toggle-star)&n\\\hline
	tse&<plug>(vimtex-env-toggle)&n\\\hline
	ts$&<plug>(vimtex-env-toggle-math)&n\\\hline
	tsb&<plug>(vimtex-env-toggle-break)&n\\\hline
	<f6>&<plug>(vimtex-env-surround-line)&n\\\hline
	<f6>&<plug>(vimtex-env-surround-operator)&n\\\hline	
	<f6>&<plug>(vimtex-env-surround-visual)&x\\\hline
	tsd&<plug>(vimtex-delim-toggle-modifier)&nx\\\hline
	tsD&<plug>(vimtex-delim-toggle-modifier-reverse)&nx\\\hline
	<f7>&<plug>(vimtex-cmd-create)&nxi\\\hline
	]]&<plug>(vimtex-delim-close)&i\\\hline
	<f8>&<plug>(vimtex-delim-add-modifiers)&n\\\hline
	ac&<plug>(vimtex-ac)&xo\\\hline
	ic&<plug>(vimtex-ic)&xo\\\hline
	ad&<plug>(vimtex-ad)&xo\\\hline
	id&<plug>(vimtex-id)&xo\\\hline
	ae&<plug>(vimtex-ae)&xo\\\hline
	ie&<plug>(vimtex-ie)&xo\\\hline
	a$&<plug>(vimtex-a$)&xo\\\hline
	i$&<plug>(vimtex-i$)&xo\\\hline
	aP&<plug>(vimtex-aP)&xo\\\hline
	iP&<plug>(vimtex-iP)&xo\\\hline
	am&<plug>(vimtex-am)&xo\\\hline
	im&<plug>(vimtex-im)&xo\\\hline
	%&<plug>(vimtex-%)&nxo\\\hline
	]]&<plug>(vimtex-]])&nxo\\\hline
	][&<plug>(vimtex-][)&nxo\\\hline
	[]&<plug>(vimtex-[])&nxo\\\hline
	[[&<plug>(vimtex-[[)&nxo\\\hline
	]m&<plug>(vimtex-]m)&nxo\\\hline
	]M&<plug>(vimtex-]M)&nxo\\\hline
	[m&<plug>(vimtex-[m)&nxo\\\hline
	[M&<plug>(vimtex-[M)&nxo\\\hline
	]n&<plug>(vimtex-]n)&nxo\\\hline
	]N&<plug>(vimtex-]N)&nxo\\\hline
	[n&<plug>(vimtex-[n)&nxo\\\hline
	[N&<plug>(vimtex-[N)&nxo\\\hline
	]r&<plug>(vimtex-]r)&nxo\\\hline
	]R&<plug>(vimtex-]R)&nxo\\\hline
	[r&<plug>(vimtex-[r)&nxo\\\hline
	[r&<plug>(vimtex-[r)&nxo\\\hline
	]/&<plug>(vimtex-]/&nxo\\\hline
	]*&<plug>(vimtex-]star&nxo\\\hline
	[/&<plug>(vimtex-[/&nxo\\\hline
	[*&<plug>(vimtex-[star&nxo\\\hline
	K&<plug>(vimtex-doc-package)|&n\\\hline
\end{xltabular}
}

\subsection{options}
{\ttfamily
g:vimtex_enable

设置为0,禁用 vimtex，default value: undefined

g:vimtex_cache_root

指定 vimtex 缓存路径，如果设置 $XDG_CACHE_HOME 则缓存目录是：\\ $XDG_CACHE_HOME/vimtex,如果没有设置，则 vimtex 默认用 ~/.cache/vimtex

g:vimtex_cache_persistent

是否开启永久缓存，default value: 1.

g:vimtex_compiler_enabled

使用此选项关闭/开启编译接口,default value: 1

g:vimtex_compiler_silent

设置此选项为 1 或 v:true 可在编译器启动、停止及回调期间静默编译器消息，default: 0

g:vimtex_compiler_methed

此选项设置编译方式,有两种方式配置此项

i) 设置为字符串

你可以选择以下编译器:

\begin{xltabular}{\textwidth}[t]{|l|l|X|}
\hline
value&documentation&configuration\\\hline
latexmk&vimtex-compiler-latexmk&g:vimtex_compiler_latexmk\\\hline
latexrun&vimtex-compiler-latexrun&g:vimtex_compiler_latexrun\\\hline
tectonic&vimtex-compiler-tectonic&g:vimtex_compiler_tectonic\\\hline
arara&vimtex-compiler-arara&g:vimtex_compiler_arara\\\hline
generic&vimtex-compiler-generic&g:vimtex_compiler_generic\\\hline
\end{xltabular}

ii) 通过函数动态调整

g:vimtex_compiler_clean_paths

你想通过:vimtexclean 命令清理的额外生成文件的路径列表.
注意：这个选项对 latexmk 和 latexrun 编译器后端是无效的，因为它们自己已经实现了清理功能。
每一项表达式都是一个 glob 模式（详见 glob() 函数和通配符 wildcards 的 vim 帮助文档），并且每一个路径都会被假定为以项目根目录为起点

例如：如果你想清理所有生成的 _minted 路径（包括目录），你可以这样写:

\begin{lstlisting}
	vim.g:vimtex_compiler_clean_paths = ['_minted*']
\end{lstlisting}
每一个匹配到的路径将会通过 delete() 函数删除，
并带有 "rf" 参数，即递归强制删除（包括文件夹内容）

对于 latexmk，你可以通过 $clean_ext 环境变量实现类似功能，具体用法见其官方文档：\\https://texdoc.org/serve/latexmk/0

默认值是一个空列表：[]，即不清理任何额外路径

当你在使用 :vimtexclean 或 :vimtexclean! 清理辅助文件（如 .aux, .log, .out 等）时，vimtex 会默认清除一些已知的中间文件。如果你还有额外的生成文件（比如某些特殊工具生成的 \\.synctex.gz, .bbl, .fls, .fdb_latexmk 等），你可以通过 g:vimtex_compiler_clean_paths 来手动添加这些路径或文件。

g:vimtex_compiler_latexmk

此字典允许自定义 vimtex-compiler-latexmk.用户设置的值优先于默认值

default value

\begin{lstlisting}
	let g:vimtex_compiler_latexmk = {
	\ 'aux_dir' : '',
	\ 'out_dir' : '',
	\ 'callback' : 1,
	\ 'continuous' : 1,
	\ 'executable' : 'latexmk',
	\ 'hooks' : [],
	\ 'options' : [
	\   '-verbose',
	\   '-file-line-error',
	\   '-synctex=1',
	\   '-interaction=nonstopmode',
	\ ],
	\}
\end{lstlisting}
默认值显示了哪些条目可以被更改,详细解释.

aux_dir ~

此选项设置辅助输出文件的目录,它对应于 latexmk 的 \verb|$aux_dir| 选项,如果路径是相对路径，则认为是相对于主项目文件的路径.

该选项的值应为以下之一：

1.表示路径的字符串

2.一个带有名为 "file_info" 的单个字典参数的 |funcref|（函数引用）

file_info = {
  root = …               " 项目根目录
  target = …             " 编译目标完整路径
  target_basename = …    " 目标文件名（不带路径）
  target_name = …        " 目标文件名（不带扩展名）
  jobname = …            " jobname 参数
}

out_dir

此选项设置编译输出文件目录.它对应于 `latexmk` 中的 `\$out_dir` 选项.如果路径是相对路径，则被认为是相对于主项目文件的路径.  其值可以是字符串或 |funcref|，类似上述描述的 `aux_dir` 键。 如果指定的输出目录不存在，则会自动创建。

注 1：此选项仅适用于 `latexmk` 版本 4.27 及以上。

 注 2：如果 `.latexmkrc` 文件中设置了 `\$out_dir`，则以 `.latexmkrc` 为准。

注 3：如果定义了 \$vimtex_output_directory，则其具有最高优先级。

\begin{description}
	\item[callback] 若启用此选项，将会在编译完成后让 `latexmk` 调用 vimtex#compiler#callback。
	\item[continuous] 若启用，则 `latexmk` 将以持续模式运行，即带上 `-pvc` 参数。
这意味着每当相关文件发生更改时，`latexmk` 会自动重新编译文档，直到进程被终止。

若禁用，则 `latexmk` 将只进行单次编译。

注：事件 VimtexEventCompileStarted 和 VimtexEventCompileStopped仅在启用此选项时才相关。
	\item[executable] 指定 latexmk 的执行程序的路径或名称

hooks

一个 funcref 列表。若以持续模式运行，则每当 `latexmk` 输出一行信息时，每个 hook 函数都会以该行为参数被调用。
\item[options] 此列表选项会传递给 latexmk。默认选项适用于大多数人。

注：像 -pdf 或 -lualatex 这类选项不应加入该列表。
这些是用于指定 latex 引擎的选项，请参见 g:vimtex_compiler_latexmk_engines。

注：也可以通过全局或项目级 .latexmkrc 文件间接为 latexmk 指定选项。
但需知晓，命令行中指定的选项具有优先权，因此如果你想覆盖上述默认选项之一，
则需要将此键设置为包含所需选项的列表。
\item[g:vimtex_compiler_latexmk_engines] 定义 tex 程序指令
（参见 vimtex-tex-program）与编译器引擎之间的映射关系。
这个映射由 vimtex-compiler-latexmk 使用，来定义 latex 编译程序。
The _ key defines the default engine.

注：如果主项目文件中没有指定 tex 程序指令，并且 $pdf_mode 被添加进项目目录下的 \\.latexmkrc 文件，
那么编译器引擎将会根据 $pdf_mode 的值自动推断。

$pdf_mode 支持的值包括：

1：表示 pdflatex

4：表示 lualatex

5：表示 xelatex

详细内容请参考 latexmk 的官方文档。

default value:

\begin{lstlisting}
	let g:vimtex_compiler_latexmk_engines = {
	\ '_' : '-pdf',
	\ 'pdfdvi' : '-pdfdvi',
	\ 'pdfps' : '-pdfps',
	\ 'pdflatex' : '-pdf',
	\ 'luatex' : '-lualatex',
	\ 'lualatex' : '-lualatex',
	\ 'xelatex' : '-xelatex',
	\ 'context (pdftex)' : '-pdf -pdflatex=texexec',
	\ 'context (luatex)' : '-pdf -pdflatex=context',
	\ 'context (xetex)' : '-pdf -pdflatex=''texexec --xtx''',
	\}
\end{lstlisting}
\item[g:vimtex_complete_enabled] 使用此选项启用/禁用 VimTex 补全。

Default value: 1

g:vimtex_complete_close_braces

此选项控制是否追加闭合括号在标签或引用补全后.

default value: 0

g:vimtex_context_pdf_viewer

指定用于通过 vimtex-context-menu| 打开 pdf 文件的 pdf 查看器，
\end{description}
}
\subsection{Commands}
{\ttfamily
\begin{description}
	\item[:vimtexrefreshfolds] 刷新折叠
	\item[:vimtextocopen] 打开目录
	\item[:vimtextoctoggle] 切换目录的显示状态
	\item[:vimtexlog]打开临时缓冲区以显示消息日志，包括时间戳和消息来源的跟踪。按 q 或 <esc> 可关闭该缓冲区。 
	\item[:vimtexcompile] 如果编译器支持并设置为持续运行模式，则该命令用作编译器切换。否则，它将进行一次性编译。当开始编译时
	\item[] 
	\item[] 
	\item[] 
	\item[] 
	\item[]
\end{description}
}
\subsection{map definitions}
\subsection{insert mode mappings}

\subsection{events}
\subsection{text objects}
 
\section{completion}
如果\texttt{g:vimtex_complete_enabled}设为 1 (default)，那么 vimtex 会自动设置 omnifunc 来提供全能补全(omni completion)，详见compl-omni.
omni completion可以在插入模式下通过\texttt{ctrl-x_ctrl-o}触发。
也可以设置\texttt{g:vimtex_complete_close_braces},这可以使补全加上闭合括号。
omni 补全功能可补全引文、标签、术语表条目和文件名。以下各节记录了 vimtex 补全函数所提供的各种补全类型。
很多人期望 vimtex 和 vim/neovim 提供“自动”补全，也就是“自动完成”。然而，自动补全并不是 vim/neovim 的内建功能。本章的最后一节介绍了一些可提供自动补全引擎的插件替代方案，以及如何将其与 vimtex 配置使用，详见 vimtex-complete-auto。
相关设置项:
\begin{description}
	\item[g:vimtex_complete_bib] 启用/禁用 bibtex 文献条目的补全
	\item[g:vimtex_complete_close_braces] 是否自动添加补全后的闭合括号
	\item[g:vimtex_complete_enabled] 是否启用补全
	\item[g:vimtex_complete_ignore_case] 忽略大小写
	\item[g:vimtex_complete_ref]
	\item[g:vimtex_complete_smart_case] 智能大小写匹配（例如根据输入内容自动判断是否区分大小写）
\end{description}
\subsection[complete citations]
引用补全通过 \q cite 命令触发。补全功能会解析所包含的 bib 文件和 thebibliography 来收集补全候选项。
默认情况下，引用补全是智能的，它可以通过 g:vimtex_complete_bib.match_str_fmt 所匹配的匹配字符串来补全作者名、标题以及其它。如果愿意，可以将 g:vimtex_complete_bib
 的 simple key 设定为仅允许直接对 bibkey 进行补全。这种方式通常在搭配自动补全插件使用时效果更佳。

一个智能补全例子，假定 bibliography file 中包含以下条目：
\begin{verbatim}
  @book{knuth1981,
    author = "donald e. knuth",
    title = "seminumerical algorithms",
    publisher = "addison-wesley",
    year = "1981"
  }
\end{verbatim}
那么，在默认配置下，the bibliography key knuth1981 将可以通过如下方式补全，例如：
\begin{verbatim}
  \cite{knuth 1981<ctrl-x><ctrl-o>
  \cite{algo<ctrl-x><ctrl-o>
  \cite{don.*knuth<ctrl-x><ctrl-o>
\end{verbatim}
正如最后一个示例所示，搜索字符串（例如 don.*knuth）是作为正则表达式应用的。
\subsection{complete labels}
标签补全是通过 \q ref{ 命令触发的。补全功能会解析所有相关的 aux 文件以收集补全候选项。这一点非常重要，因为这意味着补全功能仅在 latex 文档已经编译过的情况下才可用。
例如：

\verb|\ref{sec:<ctrl-x><ctrl-o>|

\subsection{complete-command\&environments}

命令补全在输入 /  后可用，并且提供 \LaTeX 命令的相关补全候选项。tex 文档导言会被解析，为所加载的的宏包
和那些在导言区使用 \verb|\newcommand, \let and \def| 定义的命令提供补全。
环境补全在输入 \verb|\begin{| 或 \verb|\end{|后可用。
与命令类似，环境名来自加载的宏包和导言区使用 \verb|\newenviroment| 定义的新环境。
支持许多宏包，参阅 \verb|/autoload/vimtex/complete| 中的相关文件列表。
\subsection{complete flle names}
文件名补全支持以下命令：
\begin{verbatim}
	\includegraphics{
	补全图像文件名
	\input{
	\include{
	\includeonly{
	补全 .tex 文件
	\includepdf{
	补全 .pdf 文件。此宏由 pdfpages 宏包提供。
	\includestandalone{
	补全 .tex 文件。此宏由 standalone 宏包提供。
\end{verbatim}
\subsection{comple}
123
\section{FOLDING}
vimtex 可以根据 \LaTeX 的结构(part、chapter、section 和 subsection)折叠文档。
在 TEX 文件中，折叠默认是关闭的。如果你需要，可以启用它，
通过：\texttt{g:vimtex_fold_enabled}，或者手动设置如下：
\begin{lstlisting}
set foldmethod=expr
set foldexpr=vimtex#fold#level(v:lnum)
set foldtext=vimtex#fold#text(
\end{lstlisting}
折叠主要通过字典选项：\texttt{ g:vimtex_fold_types } 配置。

注意：fold-expr 折叠方法在处理长行及大文件时很慢，为了加快速度
，可以启用：\texttt{g:vimtex_fold_manual}。另一种选择是使用专门的插件提升折叠速度。

为了获得更整洁的折叠文本，建议将全局的 fillchars 选项中用于折叠的字符设置为空格：\verb|set fillchars=fold:\ |。

注意：务必在反斜杠后加一个空格！

此外，VimTeX 还为 BibTeX 文件提供了基础折叠功能。此功能默认关闭，
但如果设置了 \texttt{g:vimtex_fold_enabled} 为 1 或 v:true，则会启用。

相关设置包括：

\begin{lstlisting}
	g:vimtex_fold_enabled
	g:vimtex_fold_manual
	g:vimtex_fold_levelmarker
	g:vimtex_fold_types
	g:vimtex_fold_types_defaults
	g:vimtex_fold_bib_enabled
	g:vimtex_fold_bib_max_key_width
\end{lstlisting}
\section{INDENTATION}
VimTeX 为 LaTeX 文档和参考文献文件（.bib 文件）提供了自定义的缩进函数。

相关设置项：
\begin{lstlisting}
	g:vimtex_indent_enabled
	g:vimtex_indent_bib
	g:vimtex_indent_bib_style
	g:vimtex_indent_bib_format
	g:vimtex_indent_bib_format_options
	g:vimtex_indent_bib_format_options_default
\end{lstlisting}
\section{Syntex}
VimTeX 提供了一个核心语法插件，并结合了针对特定宏包的附加组件。
语法插件旨在保持一致性、结构化以及高效。针对特定宏包的附加组件通常只在适用时加载
在现代，许多人开始依赖 Tree-sitter 来进行语法高亮（以及更多功能）。因此，有必要提到，部分文本对象依赖语法高亮规则才能工作。另见 vimtex-text-objects 和 vimtex-faq-treesitter。

\LaTeX 是一种宏展开语言，不运行 tex 编译器本身几乎不可能写出完全正确的语法解析。VimTeX 的目标是务实，提供尽力而为的语法高亮——在简洁性和完整性之间取得合理平衡。

总是可能遇见解析器失败的情况，有时很难恢复。因此可以手动激活一个大幅度简化的语法区来处理这类情况。此语法区通过指令 \verb|% VimTeX: SynIgnore on| 启用，类似地用 \verb|% VimTeX: SynIgnore off| 禁用。

\begin{lstlisting}
	% VimTeX: SynIgnore on
	\catcode`\$=11
	$
	\catcode`\$=3
	% VimTeX: SynIgnore off
\end{lstlisting}


相关设置：

\begin{lstlisting}
	g:vimtex_syntax_enabled
	g:vimtex_syntax_custom_cmds
	g:vimtex_syntax_custom_cmds_with_concealed_delims
	g:vimtex_syntax_conceal
	g:vimtex_syntax_conceal_cites
	g:vimtex_syntax_conceal_disable
	g:vimtex_syntax_nested
	g:vimtex_syntax_packages
\end{lstlisting}
\section{COMPILER}





\section{view}
vimtex 提供命令 \verb|:vimtexview| ，通过 \verb|g:vimtex_view_method| 指定查看器，打开生成的 pdf 文件。
默认情况下，该命令被映射到 \verb|<localleader>lv|。支持的查看器见 vimtex-view-configuration,也解释了如何配置。
很多 pdf 查看器支持 synctex 功能，可以实现 pdf 文档与the source tex 文件之间相互导航。
如果可能，\verb|:VimtexView| 命令在打开查看器时会自动执行正向搜索。详细内容见 vimtex-synctex。
相关配置项：
\begin{lstlisting}
	g:vimtex_view_enabled
	g:vimtex_view_automatic
	g:vimtex_view_forward_search_on_start
	g:vimtex_view_use_temp_files
	g:vimtex_view_method
	g:vimtex_view_general_options
	g:vimtex_view_general_viewer
\end{lstlisting}
相关事件(event)：
\begin{lstlisting}
	VimtexEventView
	VimtexEventViewReverse
\end{lstlisting}
\subsection{VIEWER CONFIGURATION}
g:vimtex_view_method 是主要的配置变量。它允许在一组预定义的查看器中进行选择，其中也包括一个通用的自定义接口。
对于预定义的查看器，带有 synctex 的正向搜索通常无需进一步配置即可使用。
\subsubsection{zathura}
zathura 是一个类似于 mupdf 的快速、极简主义 pdf 阅读器。
与 mupdf 相比，它提供了更强的用户自定义配置能力。zathura 完全支持正向/反向搜索。
zathura 可以直接在 xorg 上直接安装使用，也支持 macos and wsl。
configuration:

\texttt{let g:vimtex_view_method = 'zathura'}

主（main）版本使用 xdotool 来避免打开多个重复的 zathura 实例。

但在某些环境中，xdotool 不可用。就建议使用 zathura_simple 这个简化版本。

vimtex 会以 -x 参数启动 zathura 以设置自动反向搜索。这意味着，大多数情况下，反向搜索不需要进一步设置就可以按照预想工作。
你可能仍然对逆向搜索配置的工作原理感兴趣，在这种情况下，应该阅读 |vimtex-synctex-inverse-search|。

zathura 也支持 \%{column}，所以如果你的 synctex 实现支持获取列信息，那么你可以在你的 zathurarc 文件中添加以下内容：

\verb|set synctex-editor-command "vim -v --not-a-term -t dumb -c \"vimtexinversesearch \%{line}:\%{column} '\%{input}'\""|

相关设置：

g:vimtex_callback_progpath
g:vimtex_view_zathura_check_libsynctex
g:vimtex_view_zathura_use_synctex
g:vimtex_view_zathura_options

注意：zathura 配置逆向搜索的插值变量是 \%{line} 和 \%{input}，而不是 \%l 和 \%f。

注意：zathura 的新版本不再确保支持 synctex。这导致在某些平台上（例如 opensuse）丢失了 synctex 支持，详见 https://github.com/lervag/vimtex/issues/384。一个解决方法是手动从源码构建 zathura。

注意：查看器的处理使用窗口标题匹配。如果存在另一个 pdf 查看器，其打开的文件与当前项目的 pdf 文件同名，
那么可能会产生冲突。特别是，这可能会影响 zathura 的正向和逆向搜索功能。
\section{faq}
\subsection{vimtex-faq-treesitter}
q：vimtex 与 tree-sitter 相比如何？

a：vimtex 使用传统的语法脚本来为 \LaTeX 文档提供语法高亮（see syntax.txt）。
该措施相当完整，并且支持许多宏包，适用于大多数用户。参见 see vimtex-synctex 获取详细信息。

tree-sitter 是一个用于代码增量解析的现代库。neovim内置了对tree-sitter的支持。
使用额外的 tree-sitter 插件，可以基于 tree-sitter 实现语法高亮。其总体优点是非常快；并且针对许多语言，可以提供高质量的效果。

然而，为 \LaTeX 编写一个通用解析器很困难。这是因为 \LaTeX 是一种语义化语言，有着大量不同的命令和宏命令，
来自于上千可用宏包。其中，许多命令以不同方式高亮是有意义的。
也就是说，我们需要处理大量特殊情况和边缘情况！

此外，tree-sitter 的高亮当前不支持 concealing，许多人对此功能非常喜爱（参见 vimtex-syntax-conceal）最后，
vimtex的一些功能依赖于vimtex的语法高亮才能正常工作。例如数学文本对象
（如 \verb|<plug>(vimtex-a$)| 和 \verb|<plug>(vimtex-i$)|），因为这些文本对象会检查语法组以确定数学区域。。

最后，vimtex的 一些功能依赖于 vimtex 的语法高亮才能正常工作。
例如数学文本对象（如 \verb|<plug>(vimtex-a$)| 和 \verb|<plug>(vimtex-i$)|，因为这些文本对象会检查语法组以确定数学区域。

因此，对于使用 Tree-sitter 的用户，强烈建议禁用\LaTeX 缓冲区的Tree-sitter高亮。

\begin{lstlisting}
	require('nvim-treesitter.configs').setup {
		highlight = {
			enable = true,
			disable = { 'tex' }, -- 禁用 tex 的 tree-sitter 语法高亮
		},
	}
\end{lstlisting}

当然，有些用户可能仍希望使用 Tree-sitter 进行高亮，尽管有上述原因。此时建议使用以下VimTeX选项避免启动警告。

\begin{lstlisting}
	vim.g:vimtex_syntax_conceal_disable = 1
	vim.g:vimtex_syntax_enabled = 0
\end{lstlisting}



\end{document}











vim:ft=markdown:norl:

