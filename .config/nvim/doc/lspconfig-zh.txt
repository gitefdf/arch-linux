*zh-lspconfig*
# lspconfig

nvim-lspconfig 提供用户贡献的 Neovim LSP 客户端配置

## 介绍

nvim-lspconfig 是一组由社区贡献的 Neovim LSP 客户端配置集合。查看 lspconfig-all 可获取完整配置列表。

注意：nvim-lspconfig 只是一些配置的集合。它没有 API 或框架。不是 Neovim 启用 LSP 支持所必须的。

不使用 nvim-lspconfig 配置 LSP，请参考 lsp-quickstart。

---

## 快速开始 (lspconfig-quickstart)

1. 安装一个语言服务器，例如 pyright：
  ```bash
  npm i -g pyright
  ```
2. 在 init.lua 中添加语言服务器的配置：
  ```lua
  vim.lsp.enable('pyright')
  ```
3. 确保你的项目目录包含根目录标识文件（root marker），参考 |lspconfig-all|。
4. 打开代码文件，LSP 会自动启用并提供诊断信息：

nvim main.py

5. 运行 `:checkhealth vim.lsp` 来查看状态或排查问题。

另见：|lsp-quickstart|

---

## 用法

每个配置都为 `vim.lsp.config()` 提供了默认值，你可以直接使用默认配置（通过调用 vim.lsp.enable(…)），或者在启用前覆盖默认值（通过调用 `vim.lsp.config()`）。

这种“可组合性”（composability）是 vim.lsp.config 的核心特性，使 nvim-lspconfig 只需提供“默认配置”。

要启用一个配置，请调用 `vim.lsp.enable()`。
lspconfig-all 中的每一个配置可以通过 `vim.lsp.config('<name>')` 和`vim.lsp.enable('<name>')` 获得。

例如，启用 'clangd' 配置。

```lua
-- 可选：覆盖部分默认配置
vim.lsp.config('clangd', {
--配置项
})
-- 启用基于文件类型自动激活）
vim.lsp.enable('clangd')
```

你可以调用 vim.lsp.config 的索引形式来获得解析后的配置而不需要实际启用该语言服务器。

```lua
-- 打印出 clangd 的最终配置（调试用）
vim.print(vim.lsp.config['clangd'])
```
 
注意：vim.lsp.config() 和旧版 nvim-lspconfig 接口有以下区别：

- 默认启用了 single_file_support（单文件支持）。若要禁用，需设置 workspace_required=false（见 vim.lsp.ClientConfig）；
- on_new_config 当前缺失；
  - 不过你可以通过自定义 root_dir 函数实现相似效果，参考此处：#32037-comment

---

## 命令

每个语言服务器配置文件中提供的命令只对当前缓冲区有效，它们都以 `Lsp` 前缀命名。你可以在已启用 LSP 的缓冲区中输入： `:Lsp<tab>` 查看可用命令。

以下是 nvim-lspconfig 提供的全局命令。

- `:LspInfo`
  - 显示当前运行的 LSP 客户端和服务器状态（等价于 `:checkhealth vim.lsp`）。
- `:LspStart [config_name]`
    启动指定配置的语言服务器，仅当成功识别到项目根目录时才启动。
    默认启动当前缓冲区文件类型匹配的所有已配置语言服务器。

    :LspStop [客户端ID或配置名]
    停止指定客户端，默认停止当前缓冲区活跃的所有服务器。
    强制停止所有语言服务器用：

:LspStop ++force

    :LspRestart [客户端ID或配置名]
    重启指定的客户端，并尝试重新附加到原缓冲区。默认重启所有活跃服务器。

---

## 服务器配置

LSP 配置列表见 lspconfig-all。

若缺少某个语言服务器的配置，你可以使用 vim.lsp.config() 自定义（需要 Nvim 0.11+），详见 |lsp-config|。

---

## 新增配置


要创建新配置，见 lsp-config （需 Nvim 0.11+）。
若要向 nvim-lspconfig 提交配置贡献，查看 ../CONTRIBUTING.md。

---

## 补全支持

见 lsp-completion。

---

## 调试与问题排查

查看 lsp-log 以启用详细日志。

虽然语言服务器好用，但调试问题是个挑战。
首先要判断问题来源，通常按以下优先顺序：

    语言服务器本身

    插件冲突

    用户自定义配置

    Neovim 核心内置 LSP 客户端

    nvim-lspconfig 本身的问题

建议第一步使用最小配置测试：
https://github.com/neovim/neovim/issues/new?assignees=&labels=bug%2Clsp&template=lsp_bug_report.yml
常见问题如下：

    未安装语言服务器：nvim-lspconfig 不会帮你安装语言服务器。
    确保 cmd 字段里指定的程序可以从命令行运行。若不是绝对路径，需保证它在 PATH 中。

    缺少文件类型插件：某些语言无法被识别，执行 :set ft? 检查文件类型是否为空。

    未触发根目录检测：
    语言服务器一般依赖项目根目录标识（如 .git）才会启动。
    每个语言服务器的根目录规则写在对应的 Lua 配置中，可见 |lspconfig-all|。

    错误配置：
    很多用户会修改 cmd, on_init, handlers 等字段，引起问题。
    建议先用默认配置测试，确保不是自定义配置导致的问题。

`:LspInfo` 查看当前 LSP 客户端状态，辅助调试。

vim:ft=markdown:norl:
